import {createAsyncThunk, createSlice} from '@reduxjs/toolkit'
import * as auth from 'auth-provider'

const initialState = {
  user: null,
  status: 'idle',
  error: null,
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const login = createAsyncThunk('auth/login', async data => {
  return auth.login(data)
})

export const loginWithToken = createAsyncThunk('auth/loginWithToken', token => {
  return auth.loginWithToken(token)
})

export const register = createAsyncThunk('auth/register', async data => {
  return auth.register(data)
})

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: state => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      auth.logout()
      state.user = null
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addCase(login.pending, state => {
        state.status = 'loading'
      })
      .addCase(login.fulfilled, (state, action) => {
        state.status = 'fulfilled'
        state.user = action.payload
      })
      .addCase(login.rejected, (state, action) => {
        state.status = 'rejected'
      })
      .addCase(loginWithToken.pending, state => {
        state.status = 'loading'
      })
      .addCase(loginWithToken.fulfilled, (state, action) => {
        state.status = 'fulfilled'
        state.user = action.payload.user
      })
      .addCase(loginWithToken.rejected, (state, action) => {
        state.status = 'rejected'
      })
      .addCase(register.pending, state => {
        state.status = 'loading'
      })
      .addCase(register.fulfilled, (state, action) => {
        state.status = 'fulfilled'
        state.user = action.payload
      })
      .addCase(register.rejected, (state, action) => {
        state.status = 'rejected'
      })
  },
})

export const {logout} = authSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.auth.value)`
export const selectUser = state => {
  return state?.auth?.user
}

export default authSlice.reducer
